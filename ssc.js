// Generated by LiveScript 1.6.0
(function(){
  var stream, execSync, fs, args, setting, libs, toJs, i$, len$, arg, ref$, key, val, output, lib, valueMap, reqlib;
  stream = require("./index");
  execSync = require("child_process").execSync;
  fs = require('fs');
  args = process.argv.slice(2);
  setting = {
    input: "index.stream",
    output: false,
    target: "js",
    module: "yes",
    libs: [],
    setting: false
  };
  libs = [];
  toJs = function(it){
    var outstrings, key, value;
    outstrings = "";
    if (typeof it === "object" && !Array.isArray(it)) {
      outstrings += "{" + (function(){
        var ref$, results$ = [];
        for (key in ref$ = it) {
          value = ref$[key];
          results$.push(key + ": " + toJs(value));
        }
        return results$;
      }()).join(",") + "}";
    } else if (typeof it === 'function') {
      outstrings += it.toString();
    } else {
      outstrings += JSON.stringify(it);
    }
    return outstrings;
  };
  for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
    arg = args[i$];
    ref$ = arg.split("="), key = ref$[0], val = ref$[1];
    if (key === libs && !Array.isArray(libs)) {
      val = val.split("&");
    }
    setting[key] = val;
  }
  if (typeof setting.setting === "string") {
    setting = import$(clone$(setting), JSON.parse(fs.readFileSync(setting.setting).toString()));
  }
  output = "";
  for (i$ = 0, len$ = (ref$ = setting.libs).length; i$ < len$; ++i$) {
    lib = ref$[i$];
    libs.push(require(lib));
  }
  valueMap = stream.concatMap.apply(this, libs);
  if (!setting.output) {
    stream.runStream(fs.readFileSync(setting.input).toString(), stream.concatMap(valueMap, stream.valueMap));
  } else {
    console.log("Building Now");
    reqlib = "";
    valueMap.forEach(function(value, key){
      return reqlib += "valueMap.set( " + key + ", " + toJs(value) + " );";
    });
    if (setting.module === "yes") {
      output = "(async function(){" + fs.readFileSync(__dirname + "/index.js").toString() + "retv = {};\n" + reqlib + "(await runStream(`" + fs.readFileSync(setting.input).toString() + "`, valueMap)).forEach( ( value, key ) => {retv[ key ] = value});return retv})()";
    } else {
      output = "" + fs.readFileSync(__dirname + "/index.js").toString() + "" + reqlib + "runStream(`" + fs.readFileSync(setting.input).toString() + "`, valueMap)";
    }
    fs.writeFileSync(setting.output, output);
    console.log("Build Succeed");
    if (setting.target === "bin") {
      console.log("Compiling Now");
      fs.renameSync(setting.output, "_" + setting.output);
      execSync("qjsc _" + setting.output);
      fs.renameSync("a.out", setting.output);
      fs.unlinkSync("_" + setting.output);
      console.log("Compile Succeed");
    }
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
